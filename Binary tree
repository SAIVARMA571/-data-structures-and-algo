PreOrder, PostOrder, and InOrder Traversal of Binary Tree.

python code:

class Node:
    def __init__ (self, key):
        self.key = key
        self.left = None
        self.right = None

def inOrder(root):
    if(root != None):
        inOrder(root.left)
        print(root.key)
        inOrder(root.right)
def preOrder(root):
    if(root != None):
        print(root.key)
        preOrder(root.left)
        preOrder(root.right)
def postOrder(root):
    if(root != None):
        postOrder(root.left)
        postOrder(root.right)
        print(root.key)
    

        
if __name__ == "__main__":
    root = Node(10)
    root.left = Node(20)
    root.right = Node(30)
    root.left.left = Node(40)
    root.left.right = Node(50)
    root.left.right.left = Node(70)
    root.left.right.right = Node(80)
    root.right.right = Node(60)
    postOrder(root)
    
    
    ***********************************************************************************************************************************************************
c++ code:

struct Node{
    int key;
    Node *left;
    Node *right;
    Node(int k){
        key  =k;
        left =right = NULL;
    }
};
void inOrder(Node*root){
    if(root != NULL){
        inOrder(root->left);
        cout<<root->key << " ";
        inOrder(root->right);
    }
}

void preOrder(Node*root){
    if(root != NULL){
        cout<<root->key<< " ";
        preOrder(root->left);
        preOrder(root->right);
    }
}
void postOrder(Node*root){
    if(root != NULL){
        postOrder(root->left);
        postOrder(root->right);
        cout<<root->key<<" ";
    }
}



int main(){
    Node *root = new Node(10);
    root->left = new Node(20);
    root->right = new Node(30);
    postOrder(root);
}


